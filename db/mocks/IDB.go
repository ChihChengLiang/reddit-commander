// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/BOPR/config"

	mgo "github.com/globalsign/mgo"

	mock "github.com/stretchr/testify/mock"

	types "github.com/BOPR/types"
)

// IDB is an autogenerated mock type for the IDB type
type IDB struct {
	mock.Mock
}

// FetchSiblings provides a mock function with given fields: accID
func (_m *IDB) FetchSiblings(accID uint64) ([]types.AccountLeaf, error) {
	ret := _m.Called(accID)

	var r0 []types.AccountLeaf
	if rf, ok := ret.Get(0).(func(uint64) []types.AccountLeaf); ok {
		r0 = rf(accID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.AccountLeaf)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(accID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: accID
func (_m *IDB) GetAccount(accID uint64) (types.AccountLeaf, error) {
	ret := _m.Called(accID)

	var r0 types.AccountLeaf
	if rf, ok := ret.Get(0).(func(uint64) types.AccountLeaf); ok {
		r0 = rf(accID)
	} else {
		r0 = ret.Get(0).(types.AccountLeaf)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(accID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountCollection provides a mock function with given fields:
func (_m *IDB) GetAccountCollection() *mgo.Collection {
	ret := _m.Called()

	var r0 *mgo.Collection
	if rf, ok := ret.Get(0).(func() *mgo.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Collection)
		}
	}

	return r0
}

// GetAccountCount provides a mock function with given fields:
func (_m *IDB) GetAccountCount() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccounts provides a mock function with given fields:
func (_m *IDB) GetAllAccounts() ([]types.AccountLeaf, error) {
	ret := _m.Called()

	var r0 []types.AccountLeaf
	if rf, ok := ret.Get(0).(func() []types.AccountLeaf); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.AccountLeaf)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBatches provides a mock function with given fields:
func (_m *IDB) GetAllBatches() ([]types.Batch, error) {
	ret := _m.Called()

	var r0 []types.Batch
	if rf, ok := ret.Get(0).(func() []types.Batch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBatchCollection provides a mock function with given fields:
func (_m *IDB) GetBatchCollection() *mgo.Collection {
	ret := _m.Called()

	var r0 *mgo.Collection
	if rf, ok := ret.Get(0).(func() *mgo.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Collection)
		}
	}

	return r0
}

// GetBatchCount provides a mock function with given fields:
func (_m *IDB) GetBatchCount() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBatch provides a mock function with given fields:
func (_m *IDB) GetLatestBatch() (types.Batch, error) {
	ret := _m.Called()

	var r0 types.Batch
	if rf, ok := ret.Get(0).(func() types.Batch); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Batch)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionCollection provides a mock function with given fields:
func (_m *IDB) GetTransactionCollection() *mgo.Collection {
	ret := _m.Called()

	var r0 *mgo.Collection
	if rf, ok := ret.Get(0).(func() *mgo.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Collection)
		}
	}

	return r0
}

// InsertBatchInfo provides a mock function with given fields: root, index
func (_m *IDB) InsertBatchInfo(root types.ByteArray, index uint64) error {
	ret := _m.Called(root, index)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ByteArray, uint64) error); ok {
		r0 = rf(root, index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertBulkAccounts provides a mock function with given fields: accounts
func (_m *IDB) InsertBulkAccounts(accounts []types.AccountLeaf) error {
	ret := _m.Called(accounts)

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.AccountLeaf) error); ok {
		r0 = rf(accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertGenAccounts provides a mock function with given fields: genAccs
func (_m *IDB) InsertGenAccounts(genAccs []config.GenAccountLeaf) error {
	ret := _m.Called(genAccs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]config.GenAccountLeaf) error); ok {
		r0 = rf(genAccs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTx provides a mock function with given fields: t
func (_m *IDB) InsertTx(t *types.Tx) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Tx) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopTxs provides a mock function with given fields:
func (_m *IDB) PopTxs() ([]types.Tx, error) {
	ret := _m.Called()

	var r0 []types.Tx
	if rf, ok := ret.Get(0).(func() []types.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
